// services/pageService.ts
import apiClient from '@/lib/axios';
import { Page } from '@prisma/client';

// Define a type for the data needed to create a new Page.
// We omit fields that are auto-generated by the database.
export type CreatePageData = Omit<Page, 'id' | 'createdAt' | 'updatedAt'>;

// Define a type for the data needed to update a Page.
// All fields are optional.
export type UpdatePageData = Partial<CreatePageData>;


/**
 * Fetches all pages from the API.
 * @returns {Promise<Page[]>} A promise that resolves to an array of pages.
 * @throws {Error} Throws an error if the API request fails.
 */
export const getPages = async (): Promise<Page[]> => {
  try {
    const response = await apiClient.get<Page[]>('/pages');
    return response.data;
  } catch (error) {
    console.error('Failed to fetch pages:', error);
    throw new Error('Could not fetch pages. Please try again later.');
  }
};

/**
 * Fetches a single page by its ID from the API.
 * @param {string} id - The ID of the page to fetch.
 * @returns {Promise<Page>} A promise that resolves to the page.
 * @throws {Error} Throws an error if the API request fails.
 */
export const getPageById = async (id: string): Promise<Page> => {
  try {
    const response = await apiClient.get<Page>(`/pages/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Failed to fetch page with id ${id}:`, error);
    throw new Error('Could not fetch page. Please try again later.');
  }
};

/**
 * Creates a new page.
 * @param {CreatePageData} data - The data for the new page.
 * @returns {Promise<Page>} A promise that resolves to the newly created page.
 * @throws {Error} Throws an error if the API request fails.
 */
export const createPage = async (data: CreatePageData): Promise<Page> => {
  try {
    const response = await apiClient.post<Page>('/pages', data);
    return response.data;
  } catch (error) {
    console.error('Failed to create page:', error);
    throw new Error('Could not create page. Please try again later.');
  }
};

/**
 * Updates an existing page.
 * @param {string} id - The ID of the page to update.
 * @param {UpdatePageData} data - The data to update.
 * @returns {Promise<Page>} A promise that resolves to the updated page.
 * @throws {Error} Throws an error if the API request fails.
 */
export const updatePage = async (id: string, data: UpdatePageData): Promise<Page> => {
    try {
        const response = await apiClient.patch<Page>(`/pages/${id}`, data);
        return response.data;
    } catch (error) {
        console.error(`Failed to update page with id ${id}:`, error);
        throw new Error('Could not update page. Please try again later.');
    }
};

/**
 * Deletes a page by its ID.
 * @param {string} id - The ID of the page to delete.
 * @returns {Promise<void>} A promise that resolves when the deletion is successful.
 * @throws {Error} Throws an error if the API request fails.
 */
export const deletePage = async (id: string): Promise<void> => {
    try {
        await apiClient.delete(`/pages/${id}`);
    } catch (error) {
        console.error(`Failed to delete page with id ${id}:`, error);
        throw new Error('Could not delete page. Please try again later.');
    }
};
